DB:
---

1. Create a folder 'db'
2. Create session.py to configure sqlalchemy engine, session, Base (for models) and get_db function for session check


MODELS:
-------

1. Create a folder 'models'
2. Create python files for each table (security, users, etc.) that needs to be created or referred in orm

'''example code'''
from sqlalchemy import Boolean, Column, Integer, String, Date, Float, DateTime
from db import session
class User(session.Base):
    __tablename__ = "user"
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True, nullable=False)
    is_active = Column(Boolean, default=True)
    is_superuser = Column(Boolean, default=False)  
session.Base.metadata.create_all(session.engine) #create the table in db


SCHEMAS:
--------

1. Create a folder 'schemas'
2. Create python files for each table (security, users, etc.)

'''example code
    1. use validators for required fields
'''
from pydantic import BaseModel
from typing import Optional
class UserBase(BaseModel):
    email: str
    is_active: bool = True
    is_superuser: bool = False
    first_name: str = None
    last_name: str = None
    @validator('email')
    def must_not_empty(cls, v):
        if len(v)<=5:
            raise ValueError('email must be greater than 5 characters')
        return v
class UserOut(UserBase):
    pass
class UserCreate(UserBase):
    password: str
    class Config:
        orm_mode = True #needed to link with orm model


CRUD (Create Read Update Delete):
---------------------------------

''' write your own functions to pass it to the APIs'''
1. Create a folder 'crud'
2. Create python files for each table (anomaly, rca, impact, security, users)

'''example code
    1. use schemas to validate input & restrict output content
    2. use models to create a new record or query the data
'''
from fastapi import HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from models import users as models
from schemas import users as schemas
from core.security import get_password_hash

def get_users(db: Session, skip: int = 0, limit: int = 100) -> List[schemas.UserOut]: #output vlidation schema
    return db.query(models.User).offset(skip).limit(limit).all()

def create_user(db: Session, user: schemas.UserCreate): #validation schema is passed to the input
    hashed_password = get_password_hash(user.password)
    db_user = models.User( #use model to add values to the orm model and then commit it
        first_name=user.first_name,
        last_name=user.last_name,
        email=user.email,
        is_active=user.is_active,
        is_superuser=user.is_superuser,
        hashed_password=hashed_password,
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user


CORE:
-----

1. Create a folder 'core'
2. Create python files to define core function that is necessary for the app

config.py - SQLALCHEMY_DATABASE_URI, PROJECT_NAME
security.py - get_password_hash, verify_password, create_access_token
auth.py - get_current_user, get_current_active_user, get_current_active_superuser, authenticate_user, sign_up_new_user
